import { DetectionCallback, PorcupineKeyword, PorcupineModel, PorcupineOptions } from './types';
import { BuiltInKeyword } from './built_in_keywords';
export declare class Porcupine {
    private readonly _pvPorcupineDelete;
    private readonly _pvPorcupineProcess;
    private readonly _pvGetErrorStack;
    private readonly _pvFreeErrorStack;
    private _wasmMemory;
    private readonly _pvFree;
    private readonly _processMutex;
    private readonly _objectAddress;
    private readonly _inputBufferAddress;
    private readonly _keywordIndexAddress;
    private readonly _keywordLabels;
    private readonly _messageStackAddressAddressAddress;
    private readonly _messageStackDepthAddress;
    private static _frameLength;
    private static _sampleRate;
    private static _version;
    private static _wasm;
    private static _wasmSimd;
    private static _sdk;
    private static _porcupineMutex;
    private readonly _keywordDetectionCallback;
    private readonly _processErrorCallback?;
    private constructor();
    /**
     * Get Porcupine engine version.
     */
    get version(): string;
    /**
     * Get frame length.
     */
    get frameLength(): number;
    /**
     * Get sample rate.
     */
    get sampleRate(): number;
    /**
     * Get keyword labels.
     */
    get keywordLabels(): Map<number, string>;
    /**
     * Creates an instance of the Porcupine wake word engine using either
     * a '.pv' file in public directory or a base64'd string.
     *
     * @param accessKey AccessKey generated by Picovoice Console.
     * @param keywords - Built-in or object containing a base64
     * representation of or path to public binary of a Porcupine keyword model and their sensitivities.
     * Can be provided as an array or a single keyword.
     * @param keywordDetectionCallback User-defined callback to run after a keyword is detected.
     * @param model object containing a base64 string
     * representation of or path to public binary of a Porcupine parameter model used to initialize Porcupine.
     * @param model.base64 The model in base64 string to initialize Leopard.
     * @param model.publicPath The model path relative to the public directory.
     * @param model.customWritePath Custom path to save the model in storage.
     * Set to a different name to use multiple models across `Porcupine` instances.
     * @param model.forceWrite Flag to overwrite the model in storage even if it exists.
     * @param model.version Leopard model version. Set to a higher number to update the model file.
     * @param options Optional configuration arguments, see PorcupineOptions for details.
     *
     * @returns An instance of the Porcupine engine.
     */
    static create(accessKey: string, keywords: Array<PorcupineKeyword | BuiltInKeyword> | PorcupineKeyword | BuiltInKeyword, keywordDetectionCallback: DetectionCallback, model: PorcupineModel, options?: PorcupineOptions): Promise<Porcupine>;
    /**
     * Set base64 wasm file.
     * @param wasm Base64'd wasm file to use to initialize wasm.
     */
    static setWasm(wasm: string): void;
    /**
     * Set base64 wasm file with SIMD feature.
     * @param wasmSimd Base64'd wasm file to use to initialize wasm.
     */
    static setWasmSimd(wasmSimd: string): void;
    static setSdk(sdk: string): void;
    static _init(accessKey: string, keywordPaths: Array<string>, keywordLabels: Array<string>, keywordDetectionCallback: DetectionCallback, sensitivities: Float32Array, modelPath: string, options?: PorcupineOptions): Promise<Porcupine>;
    /**
     * Processes a frame of audio. The required sample rate can be retrieved from '.sampleRate' and the length
     * of frame (number of audio samples per frame) can be retrieved from '.frameLength' The audio needs to be
     * 16-bit linearly-encoded. Furthermore, the engine operates on single-channel audio.
     *
     * @param pcm A frame of audio with properties described above.
     */
    process(pcm: Int16Array): Promise<void>;
    /**
     * Releases resources acquired by WebAssembly module.
     */
    release(): Promise<void>;
    onmessage(e: MessageEvent): Promise<void>;
    private static initWasm;
    private static getMessageStack;
}
//# sourceMappingURL=porcupine.d.ts.map