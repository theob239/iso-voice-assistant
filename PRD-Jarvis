# Product Requirements Document (PRD)
## VSP Chat RAG Application with Authentication

### Overview
This document outlines the requirements for a simple VSP Chat Jarvis application with authentication. The application will consist of a React frontend and Express backend with JWT authentication, allowing users to access a protected chat interface with RAG (Retrieval-Augmented Generation) functionality.

### Goals
- Create a simple, functional application with authentication
- Implement a public landing page and a protected chat page
- Establish a secure authentication flow using JWT tokens
- Provide a foundation for future enhancements

### Project Structure

```
vsp-rag-iFrame/
├── client/                  # React frontend
│   ├── public/              # Static assets
│   ├── src/
│   │   ├── components/      # React components
│   │   ├── pages/           # Page components
│   │   ├── context/         # React context for auth state
│   │   ├── services/        # API services
│   │   ├── utils/           # Utility functions
│   │   └── App.js           # Main App component
│   └── package.json         # Frontend dependencies
│
├── server/                  # Express backend
│   ├── controllers/         # Route controllers
│   ├── middleware/          # Express middleware
│   ├── routes/              # API routes
│   ├── config/              # Configuration files
│   ├── server.js            # Main server file
│   └── package.json         # Backend dependencies
│
└── docs/                    # Project documentation
    └── PRD.md               # This document
```

### Technical Specifications

#### Frontend (React)
- React 18.x with React Router for navigation
- Context API for state management
- JWT stored in localStorage
- Protected routes for authenticated content
- Responsive design using CSS/SCSS

#### Backend (Express)
- Node.js with Express framework, running on 3005
- JWT-based authentication
- RESTful API endpoints
- Simple in-memory user storage (hardcoded credentials)
- API for chat functionality

### Authentication Flow
1. User navigates to the application
2. User enters username and password on login page
3. Server validates credentials and issues a JWT token
4. Frontend stores token in localStorage
5. Protected routes check for valid token before rendering
6. Logout clears the token from localStorage

### Features and Pages

#### Public Pages
1. **Landing Page (Home)**
   - Welcome message: "Welcome to test Jarvis"
   - Navigation menu with Login option
   - Brief description of the application
   - Clean, simple UI

#### Protected Pages
1. **Chat with RAG**
   - Text input for user queries
   - Display area for chat history
   - RAG-powered responses
   - Only accessible to authenticated users

#### Components
1. **Navigation Bar**
   - Logo/Brand
   - Navigation links
   - Login/Logout button based on authentication state

2. **Login Form**
   - Username input
   - Password input
   - Submit button
   - Error message display

3. **Chat Interface**
   - Message history display
   - Input area with send button
   - Loading indicator during response generation

### User Credentials
For initial development, the backend will use hardcoded credentials:
- Username: `user`
- Password: `pass`

### Implementation Plan

#### Phase 1: Project Setup
- Initialize project structure
- Set up React frontend with basic routing
- Set up Express backend with basic endpoints
- Configure necessary dependencies

#### Phase 2: Authentication Implementation
- Create login page and form in frontend
- Implement JWT generation in backend
- Set up authentication middleware
- Implement protected routes in frontend
- Add login/logout functionality

#### Phase 3: Public Page Implementation
- Design and implement landing page
- Create navigation component
- Implement responsive styling

#### Phase 4: Chat Interface
- Implement basic chat UI components
- Create chat history display
- Add input area with form submission
- Implement API service for chat requests

#### Phase 5: Integration and Testing
- Connect frontend to backend APIs
- Test authentication flow
- Test chat functionality
- Fix bugs and address edge cases

### Future Enhancements
- User registration
- Password recovery
- Persistent chat history
- Enhanced RAG capabilities
- User profile management
- Admin dashboard

### Success Criteria
- Users can navigate to the landing page
- Users can log in with provided credentials
- Authenticated users can access the Chat with Jarvis page
- Unauthenticated users are redirected to login
- JWT authentication works correctly
- Basic chat functionality is operational